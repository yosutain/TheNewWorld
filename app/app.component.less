@import "common/reset";
@import "common/colors";
@import "tiles/tiles";

@supports not (display: grid) {
	.gridMapContainer{
		display: none;
	}

	#theNewWorld {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		text-align: center;
		background: url("/assets/unloaded.png");
		background-size: cover;
		background-repeat: no-repeat;
		background-position: center;
	}

	#theNewWorld:after {
		position: fixed;
		left: 0;
		top: 40vh;
		height: 10vh;
		line-height: 10vh;
		width: 100vw;
		text-align: center;
		background-color: rgba(0, 0, 0, 0.7);
		color: rgba(255, 255, 255, 0.9);
		display: block;
	    font-size: 2em;
	    margin-top: 0.67em;
	    margin-bottom: 0.67em;
	    margin-left: 0;
	    margin-right: 0;
	    font-weight: bold;
		content: "Your browser does not support CSS grids...";
	}
}

@supports (display: grid) {
	#theNewWorld {
		@rotatedWidth: abs(@tileSize * sin(45)) + abs(@tileSize * cos(45));
		@rotatedHeight: abs(@tileSize * cos(45)) + abs(@tileSize * sin(45));
		@rotationDifference: (@rotatedWidth - @tileSize);
		@moveDistance: (((@tileSize) - (@rotationDifference * 0.5)) * 0.5);
		@adjustEven: (@rotatedWidth * 0.5);
		@vMoveDistance: (((@tileSize) - (@rotationDifference)) * 0.5);
		height: 100vh;
		width: 100vw;
		position: absolute;
		left: -(@tileSize);
		top: 0 - ((@rotationDifference * 0.25) * (@tileRows)) - (@tileSize * 0.5);
		& .gridMapContainer {
			width: (@tileColumns + 0.5) * @rotatedWidth;
			height: ((@tileRows * 0.5) * (@rotatedHeight)) - @rotationDifference;
			overflow: hidden;
		}
	}

	#tileBorderMixin {
		height: @tileSize + 1;
	 	width: @tileSize + 1;
	  	line-height: @tileSize;
	  	text-align: center;
	  	transform: rotate(45deg);
	}

	.z-1 {
		z-index: 1;
	}
	.z-2 {
		z-index: 2;
	}
	.z-3 {
		z-index: 3;
	}
	.z-4 {
		z-index: 4;
	}

	.gridMapContainer {
		position: absolute;
		top: 0;
		left: 0;
		transform: rotateX(45deg);
		display: grid;
	  	grid-template-columns: repeat(@tileColumns, @tileSize);
	  	grid-template-rows: repeat(@tileRows, @tileSize);
	}

	.tileBorderType1,
	.tileBorderType2,
	.tileBorderType3,
	.tileBorderType4,
	.tileBorderType5,
	.tileBorderType6,
	.tileBorderType7,
	.tileBorderType8,
	.tileBorderType9,
	.tileBorderType11,
	.tileBorderType12,
	.tileBorderType13,
	.tileBorderType14,
	.tileBorderType15,
	.tileBorderType16,
	.tileBorderType17,
	.tileBorderType18,
	.tileBorderType19,
	.tileBorderType20,
	.tileBorderType21,
	.tileBorderType22,
	.tileBorderType23,
	.tileBorderType24,
	.tileBorderType25,
	.tileBorderType26,
	.tileBorderType27,
	.tileBorderType28,
	.tileBorderType29,
	.tileBorderType30 {
		#tileBorderMixin;
		background-color: @green;
		&.selected {
			background-color: @yuzu;
		}
	}
	.tileBorderType10 {
		#tileBorderMixin;
	}

	//CSS GRID TILE POSITION GENERATOR
	.generate-tileNumber(@from, @to) when (@from =< @to) {
		@yPos: floor((@from - 1) / @tileColumns);
		@xPos: (@from - (@yPos * @tileColumns));

		@rotatedWidth: abs(@tileSize * sin(45)) + abs(@tileSize * cos(45));
		@rotatedHeight: abs(@tileSize * cos(45)) + abs(@tileSize * sin(45));
		@rotationDifference: (@rotatedWidth - @tileSize);

		@moveDistance: (((@tileSize) - (@rotationDifference * 0.5)) * 0.5);
		@adjustEven: (@rotatedWidth * 0.5);
		@vMoveDistance: ((((@tileSize) - (@rotationDifference)) * 0.5) * @yPos);

		@tileImageSizeDifference: (@tileImageSize - @tileSize);

		.tileNumber@{from} {
			position: relative;
			left: (@moveDistance * @xPos);
			bottom: @vMoveDistance;
			&.tileImage {
				left: (@moveDistance * @xPos) - (@tileImageSizeDifference * 0.5);
				bottom: (@vMoveDistance + (@tileImageSizeDifference * 0.5));
			}
			& when not (@yPos / 2 = floor(@yPos / 2)) {
				left: (@moveDistance * @xPos) + @adjustEven + 1;
				&.tileImage {
					left: (@moveDistance * @xPos) + (@adjustEven - (@tileImageSizeDifference * 0.5)) + 1;	
				}
			}
		}
		.generate-tileNumber((@from + 1), @to);
	}
	.generate-tileNumber(1, (@tileColumns * @tileRows));
}